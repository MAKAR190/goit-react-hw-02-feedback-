{"version":3,"sources":["components/Section/Section.module.css","components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Notification/Notification.module.css","components/Section/Section.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Section","this","props","title","children","className","styles","React","Component","defaultProps","Statistics","good","neutral","bad","total","positivePercentage","wrapper","FeedbackOptions","onLeaveFeedback","options","map","el","key","v4","onClick","name","button","Notification","message","App","state","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","target","setState","prevState","prevProps","step","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"qIACAA,EAAOC,QAAU,CAAC,MAAQ,yB,gBCA1BD,EAAOC,QAAU,CAAC,QAAU,8B,gBCA5BD,EAAOC,QAAU,CAAC,OAAS,kC,gBCA3BD,EAAOC,QAAU,CAAC,QAAU,gC,oNCEtBC,E,uKAOM,IAAD,EACqBC,KAAKC,MAAzBC,EADD,EACCA,MAAOC,EADR,EACQA,SACf,OACE,6BACE,wBAAIC,UAAWC,IAAOH,OAAQA,GAC7BC,O,GAZaG,IAAMC,WAAtBR,EACGS,aAAe,CACpBN,MAAO,IAeIH,Q,gBCIAU,E,uKAbH,IAAD,EACmDT,KAAKC,MAAvDS,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAAKC,EADrB,EACqBA,MAAOC,EAD5B,EAC4BA,mBACnC,OACE,yBAAKV,UAAWC,IAAOU,SACrB,oCAAUL,GACV,uCAAaC,GACb,mCAASC,EAAT,KACA,qCAAWC,GACX,mDAAyBC,EAAzB,U,GAhBiBR,IAAMC,W,yBCwBhBS,E,uKAnBH,IAAD,EAC6BhB,KAAKC,MAAjCgB,EADD,EACCA,gBAAgBC,EADjB,EACiBA,QACxB,OACE,6BACGA,EAAQC,KAAI,SAAAC,GAAE,OACb,4BACAC,IAAKC,cACLC,QAASN,EACTO,KAAMJ,EACNhB,UAAWC,IAAOoB,QAEjBL,W,GAfmBd,IAAMC,W,iBCYrBmB,E,uKATH,IACAC,EAAY3B,KAAKC,MAAjB0B,QACR,OACE,6BACE,wBAAIvB,UAAWC,IAAOsB,SAAUA,Q,GARbrB,IAAMC,WCIvBW,EAAU,CAAC,OAAQ,UAAW,OAsDzBU,E,4MApDbC,MAAQ,CACNnB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAKPkB,mBAAqB,WACnB,OAAO,EAAKD,MAAMnB,KAAO,EAAKmB,MAAMjB,IAAM,EAAKiB,MAAMlB,S,EAEvDoB,gCAAgC,WAC9B,OAAkC,IAA9B,EAAKD,qBACA,EAEAE,KAAKC,MAAO,EAAKJ,MAAMnB,KAAO,EAAKoB,qBAAwB,M,EAItEb,gBAAkB,YAAiB,IAC3BO,EAD0B,EAAbU,OACbV,KACN,EAAKW,UAAS,SAACC,EAAUC,GACvB,OAAO,eACJb,EAAOY,EAAUZ,GAAQa,EAAUC,U,uDAMxC,OACE,6BACA,kBAAC,EAAD,CAASpC,MAAM,yBACb,kBAAC,EAAD,CAAiBgB,QAASA,EAASD,gBAAiBjB,KAAKiB,mBAE1B,IAA9BjB,KAAK8B,qBACJ,kBAAC,EAAD,CAAcH,QAAQ,sBAExB,kBAAC,EAAD,CAASzB,MAAM,cACb,kBAAC,EAAD,CACEQ,KAAMV,KAAK6B,MAAMnB,KACjBE,IAAKZ,KAAK6B,MAAMjB,IAChBD,QAASX,KAAK6B,MAAMlB,QACpBE,MAAOb,KAAK8B,qBACZhB,mBAAoBd,KAAK+B,0C,GA5CnBzB,IAAMC,WCIJgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKR,KAAM,KAEbS,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM7B,c","file":"static/js/main.ce51a5aa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__w_mjI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Statistics_wrapper__2P_j1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__HQmWA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__2bMpU\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Section.module.css\";\r\nclass Section extends React.Component {\r\n  static defaultProps = {\r\n    title: \"\",\r\n  };\r\n  static propTypes = {\r\n    title: PropTypes.string,\r\n  };\r\n  render() {\r\n    const { title, children } = this.props;\r\n    return (\r\n      <div>\r\n        <h2 className={styles.title}>{title}</h2>\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Statistics.module.css\";\r\nclass Statistics extends React.Component {\r\n  static propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n  };\r\n  render() {\r\n    const { good, neutral, bad, total, positivePercentage } = this.props;\r\n    return (\r\n      <div className={styles.wrapper}>\r\n        <p>Good: {good}</p>\r\n        <p>Neutral: {neutral}</p>\r\n        <p>Bad: {bad} </p>\r\n        <p>Total: {total}</p>\r\n        <p>Positive percentage: {positivePercentage}%</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Statistics;\r\n","import React from \"react\";\r\nimport styles from \"./FeedbackOptions.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport {v4} from 'uuid';\r\nclass FeedbackOptions extends React.Component {\r\n  static propTypes = {\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n  };\r\n  render() {\r\n    const { onLeaveFeedback,options } = this.props;\r\n    return (\r\n      <div>\r\n        {options.map(el => (\r\n          <button\r\n          key={v4()}\r\n          onClick={onLeaveFeedback}\r\n          name={el}\r\n          className={styles.button}\r\n        >\r\n          {el}\r\n        </button>\r\n        ))}\r\n    \r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport styles from \"./Notification.module.css\";\r\nimport PropTypes from 'prop-types';\r\nclass Notification extends React.Component {\r\n    static propTypes = {\r\n        message: PropTypes.string.isRequired\r\n    }\r\n  render() {\r\n    const { message } = this.props;\r\n    return (\r\n      <div>\r\n        <h2 className={styles.message}>{message}</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Notification;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Section from \"./components/Section/Section\";\r\nimport Statistics from \"./components/Statistics/Statistics\";\r\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\r\nimport Notification from \"./components/Notification/Notification\";\r\nimport PropTypes from 'prop-types';\r\n    const options = [\"good\", \"neutral\", \"bad\"];\r\nclass App extends React.Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n  static propTypes = {\r\n     step: PropTypes.number.isRequired,\r\n   }\r\n  countTotalFeedback = () => {\r\n    return this.state.good + this.state.bad + this.state.neutral;\r\n  };\r\n  countPositiveFeedbackPercentage=()=> {\r\n    if (this.countTotalFeedback() === 0) {\r\n      return 0;\r\n    } else {\r\n      return Math.round((this.state.good / this.countTotalFeedback()) * 100);\r\n    }\r\n  }\r\n\r\n  onLeaveFeedback = ({ target }) => {\r\n    let { name} = target;\r\n    this.setState((prevState,prevProps) => {\r\n      return {\r\n        [name]: prevState[name] + prevProps.step\r\n      }\r\n      \r\n    })\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n      <Section title=\"Please leave feedback\">\r\n        <FeedbackOptions options={options} onLeaveFeedback={this.onLeaveFeedback} />\r\n        </Section>\r\n        {this.countTotalFeedback() === 0 ? (\r\n          <Notification message=\"No feedback given\" />\r\n    ) : (\r\n        <Section title=\"Statistics\">\r\n          <Statistics \r\n            good={this.state.good}\r\n            bad={this.state.bad}\r\n            neutral={this.state.neutral}\r\n            total={this.countTotalFeedback()}\r\n            positivePercentage={this.countPositiveFeedbackPercentage()}\r\n          />\r\n          </Section>\r\n          )}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App step={1} />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}